module SET ( clk , rst, en, central, radius, mode, busy, valid, candidate );

input clk, rst;
input en;
input [23:0] central;
input [11:0] radius;
input [1:0] mode;
output reg busy;
output reg valid;
output reg [7:0] candidate;

parameter IDLE = 2'd0, 
          CAL = 2'd1, 
          FINISH = 2'd2;

reg [1:0] cst, nst;
reg [3:0] x1, y1, x2, y2, x3, y3, x, y;
reg [3:0] r1, r2, r3;
reg [1:0] signal;
wire [7:0] r1_square, r2_square, r3_square;

assign r1_square = r1 * r1;
assign r2_square = r2 * r2;
assign r3_square = r3 * r3;

always @(posedge clk or posedge rst) begin
    if (rst) begin
        cst <= IDLE;
    end
    else cst <= nst;
end

// read input
reg IDLE_fn;
always @(posedge clk or posedge rst) begin
    if (rst) begin
        x1 <= 4'd0; y1 <= 4'd0; x2 <= 4'd0; y2 <= 4'd0; x3 <= 4'd0; y3 <= 4'd0;
        r1 <= 4'd0; r2 <= 4'd0; r3 <= 4'd0;
        signal <= 2'd0;
        busy <= 1'b0;
    end
    else if (cst == IDLE) begin
        if (en) begin
            x1 <= central[23:20]; y1 <= central[19:16]; x2 <= central[15:12]; y2 <= central[11:8]; x3 <= central[7:4]; y3 <= central[3:0];
            r1 <= radius[11:8]; r2 <= radius[7:4]; r3 <= radius[3:0];
            signal <= mode;
            busy <= 1'b1;
            candidate <= 8'd0;
        end
        else busy <= 1'b0;
    end
end

//cal
reg cal_finish;
always @(posedge clk or posedge rst) begin
    if (rst) begin
        x <= 4'd1;
        y <= 4'd1;
    end
    else if (cst == CAL) begin
        if (x == 4'd8) begin
            x <= 4'd1;
            y <= y + 4'd1;
        end

        else x <= x + 4'd1;
    end
    else begin
        x <= 4'd1;
        y <= 4'd1;
    end
end

always @(posedge clk or posedge rst) begin
    if (rst) begin
        candidate <= 8'd0;
    end
    else if (cst == CAL) begin
        case (signal)
            2'b00:begin
                if (((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) begin
                    candidate <= candidate + 8'd1;
                end
            end
            2'b01:begin
                if ((((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) && (((x-x2)*(x-x2)+(y-y2)*(y-y2)) <= r2_square)) begin
                    candidate <= candidate + 8'd1;
                end
            end
            2'b10:begin
                if ((((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) && !(((x-x2)*(x-x2)+(y-y2)*(y-y2)) <= r2_square)) begin
                    candidate <= candidate + 8'd1;
                end
                else if (!(((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) && (((x-x2)*(x-x2)+(y-y2)*(y-y2)) <= r2_square)) begin
                    candidate <= candidate + 8'd1;
                end
            end
            2'b11:begin
                if ((((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) && (((x-x2)*(x-x2)+(y-y2)*(y-y2)) <= r2_square) && !(((x-x3)*(x-x3)+(y-y3)*(y-y3)) <= r3_square)) begin
                    candidate <= candidate + 8'd1;
                end
                else if ((((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) && !(((x-x2)*(x-x2)+(y-y2)*(y-y2)) <= r2_square) && (((x-x3)*(x-x3)+(y-y3)*(y-y3)) <= r3_square)) begin
                    candidate <= candidate + 8'd1;
                end
                else if (!(((x-x1)*(x-x1)+(y-y1)*(y-y1)) <= r1_square) && (((x-x2)*(x-x2)+(y-y2)*(y-y2)) <= r2_square) && (((x-x3)*(x-x3)+(y-y3)*(y-y3)) <= r3_square)) begin
                    candidate <= candidate + 8'd1;
                end
            end
            default: candidate <= 8'd0;
        endcase
    end
end

always @(posedge clk or posedge rst) begin
    if (rst) begin
        valid <= 1'b0;
    end
    else if (cst == FINISH) begin
        valid <= 1'b1;
    end
    else valid <= 1'b0;
end

always @(*) begin
    case (cst)
        IDLE:begin
            if (en) begin
                nst = CAL;
            end
            else nst = IDLE;
        end 
        CAL:begin
            if (x == 4'd8 && y == 4'd8) begin
                nst = FINISH;
            end
            else nst = CAL;
        end
        FINISH: nst = IDLE;
        default: nst = IDLE;
    endcase
end

endmodule


