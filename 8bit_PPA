// Code your design here
module PPA8(A, B, Cin, Sum, Cout);
  input  [7:0] A, B;
input        Cin;
output [7:0] Sum;
output Cout;

wire [6:0] c;
wire [7:0] p, g;
wire P32, G32, P43, G43, P54, G54, P52, G52, P65, G65, P63, G63, P76, G76, P74, G74, P87, G87, P85, G85;
wire carry_wire[6:0];
  and(p[0], A[0], B[0]);
  and(p[1], A[1], B[1]);
  and(p[2], A[2], B[2]);
  and(p[3], A[3], B[3]);
  and(p[4], A[4], B[4]);
  and(p[5], A[5], B[5]);
  and(p[6], A[6], B[6]);
  and(p[7], A[7], B[7]);

  or(g[0], A[0], B[0]);
  or(g[1], A[1], B[1]);
  or(g[2], A[2], B[2]);
  or(g[3], A[3], B[3]);
  or(g[4], A[4], B[4]);
  or(g[5], A[5], B[5]);
  or(g[6], A[6], B[6]);
  or(g[7], A[7], B[7]);

blue_cell Q11(.p2(p[0]), .g2(g[0]), .g1(Cin), .G(c[0]));

blue_cell Q21(.p2(p[1]), .g2(g[1]), .g1(c[0]), .G(c[1]));

black_cell Q32(.p2(p[2]), .g2(g[2]), .p1(p[1]), .g1(g[1]), .P(P32), .G(G32));
blue_cell Q31(.p2(P32), .g2(G32), .g1(c[0]), .G(c[2]));

black_cell Q43(.p2(p[3]), .g2(g[3]), .p1(p[2]), .g1(g[2]), .P(P43), .G(G43));
blue_cell Q41(.p2(P43), .g2(G43), .g1(c[1]), .G(c[3]));

black_cell Q54(.p2(p[4]), .g2(g[4]), .p1(p[3]), .g1(g[3]), .P(P54), .G(G54));
black_cell Q52(.p2(P54), .g2(G54), .p1(P32), .g1(G32), .P(P52), .G(G52));
blue_cell Q51(.p2(P52), .g2(G52), .g1(c[0]), .G(c[4]));

black_cell Q65(.p2(p[5]), .g2(g[5]), .p1(p[4]), .g1(g[4]), .P(P65), .G(G65));
black_cell Q63(.p2(P65), .g2(G65), .p1(P43), .g1(G43), .P(P63), .G(G63));
blue_cell Q61(.p2(P63), .g2(G63), .g1(c[1]), .G(c[5]));

black_cell Q76(.p2(p[6]), .g2(g[6]), .p1(p[5]), .g1(g[5]), .P(P76), .G(G76));
black_cell Q74(.p2(P76), .g2(G76), .p1(P54), .g1(G54), .P(P74), .G(G74));
blue_cell Q71(.p2(P74), .g2(G74), .g1(c[2]), .G(c[6]));

black_cell Q87(.p2(p[7]), .g2(g[7]), .p1(p[6]), .g1(g[6]), .P(P87), .G(G87));
black_cell Q85(.p2(P87), .g2(G87), .p1(P65), .g1(G65), .P(P85), .G(G85));
blue_cell Q81(.p2(P85), .g2(G85), .g1(c[3]), .G(Cout));

  fa fa0(.a(A[0]), .b(B[0]), .cin(Cin), .cout(wire carry_wire[0]), .s(Sum[0]));
  fa fa1(.a(A[0]), .b(B[0]), .cin(c[0]), .cout(wire carry_wire[1]), .s(Sum[0]));
  fa fa2(.a(A[0]), .b(B[0]), .cin(c[1]), .cout(wire carry_wire[2]), .s(Sum[0]));
  fa fa3(.a(A[0]), .b(B[0]), .cin(c[2]), .cout(wire carry_wire[3]), .s(Sum[0]));
  fa fa4(.a(A[0]), .b(B[0]), .cin(c[3]), .cout(wire carry_wire[4]), .s(Sum[0]));
  fa fa5(.a(A[0]), .b(B[0]), .cin(c[4]), .cout(wire carry_wire[5]), .s(Sum[0]));
  fa fa6(.a(A[0]), .b(B[0]), .cin(c[5]), .cout(wire carry_wire[6]), .s(Sum[0]));
  fa fa7(.a(A[0]), .b(B[0]), .cin(c[6]), .cout(Cout), .s(Sum[0]));

endmodule

module fa(a, b, cin, cout, s);
input a, b, cin;
output cout, s;

wire and1, and2, and3, or1, xor1;

and(and1, a, b);
and(and2, b, cin);
and(and3, a, cin);
or(or1, and1, and2);
or(cout, or1, and3);
xor(xor1, a, b);
xor(s, xor1, cin);

endmodule

module black_cell (p2, g2, p1, g1, P, G);
input p2, g2, p1, g1;
output P, G;
wire and1;

and(and1, p2, g1);
or(G, g2, and1);
and(P, p1, p2);

endmodule

module blue_cell (p2, g2, g1, G);
input p2, g2, g1;
output G;
wire and1;

and(and1, p2, g1);
or(G, g2, and1);

endmodule
