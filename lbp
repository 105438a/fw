module LBP(clk, rst, enable, gray_addr, gray_OE, gray_data, lbp_addr, lbp_WEN, lbp_data, finish);
           input clk, rst, enable;
           output reg [11:0] gray_addr, lbp_addr;
           output reg gray_OE, lbp_WEN, finish;
           input [7:0] gray_data;
           output reg [7:0] lbp_data;
           
           reg [7:0] data_temp [11:0];
           reg [7:0] lbp_temp [11:0];
           reg [11:0] gray_addr_buffer;
           reg [7:0] s [7:0];
           
           parameter IDLE     = 2'd0;
           parameter READ     = 2'd1;
           parameter OP       = 2'd2;
           parameter WRITE    = 2'd3;
           
           reg [1:0] cst;
           reg [1:0] nst;
           reg [5:0] x, y;
           
  always@(posedge clk or posedge rst) begin
             if(rst)begin
               cst <= IDLE;
               for(integer i = 0; i < 4096; i = i + 1)
                 lbp_data[i] <= 8'd0;
               gray_addr <= 12'd0;
               x <= 6'd1;
               y <= 6'd1;
             end
             else
               cst <= nst;
           end
           
           // nst logic
           always@(*) begin
             case (cst)
               IDLE: begin
                 if(enable == 1'b1)
                   nst = READ;
                 else
                   nst = IDLE;
               end
               READ: begin
                 if(gray_addr == 12'd4095)
                   nst = OP;
                 else
                   nst = READ;
               end
               OP: begin
                 if(x==6'd62 && y == 6'd62)
                   nst = WRITE;
                 else
                   nst = OP;
               end
               WRITE: begin
                 if(lbp_addr == 12'd4095)
                   nst = IDLE;
                 else
                   nst = WRITE;
               end
               endcase
             end
               
               
            // control signal
           always@(*) begin
             case(cst)
               IDLE: begin
                 gray_OE = 1'b0;
                 lbp_WEN = 1'b0;
               end
               READ: begin
                 gray_OE = 1'b1;
                 lbp_WEN = 1'b0;
               end
               OP: begin
                 gray_OE = 1'b0;
                 lbp_WEN = 1'b0;
               end
               WRITE: begin
                 gray_OE = 1'b0;
                 lbp_WEN = 1'b1;
               end
             endcase
           end
               
               
               
               always@(posedge clk)begin
                 if(rst) begin
                      gray_addr <= 12'd0;
                      x <= 6'd1;
                      y <= 6'd1;
                 end
                 else begin
                   
                 case(cst)
                   IDLE:begin
                      gray_addr <= 12'd0;
                      x <= 6'd1;
                      y <= 6'd1;
                   end
                   READ: begin
                     gray_addr <= gray_addr + 1'd1;
                     gray_addr_buffer <= gray_addr;
                     data_temp[gray_addr_buffer] <= gray_data;
                   end
                   
                   OP:begin
                     if(x == 6'd62)begin
                       y <= y+6'd1;
                       x <= 6'd1;
                     end
                     else
                       x <= x+6'd1;
                   end
                   WRITE:begin
                     if(lbp_addr == 12'd4095)begin
                       finish <= 1'b1;
                     end
                     else begin
                       lbp_addr <= lbp_addr + 12'd1;
                       lbp_data <= lbp_temp[lbp_addr];
                     end
                   end
                 endcase
                 end
                   
               end
                       always@(*)begin
                         
                         if(cst == OP) begin
                           s[0] = (data_temp[{y,x}-12'd65] >= data_temp[{y,x}]) ? (data_temp[{y,x}-12'd65] - data_temp[{y,x}]):8'd0;
                           s[1] = (data_temp[{y,x}-12'd64] >= data_temp[{y,x}]) ? ((data_temp[{y,x}-12'd64] - data_temp[{y,x}])<<1):8'd0;
                           s[2] = (data_temp[{y,x}-12'd63] >= data_temp[{y,x}]) ? ((data_temp[{y,x}-12'd63] - data_temp[{y,x}])<<2):8'd0;
                           s[3] = (data_temp[{y,x}-12'd1] >= data_temp[{y,x}]) ? ((data_temp[{y,x}-12'd1] - data_temp[{y,x}])<<3):8'd0;
                           s[4] = (data_temp[{y,x}+12'd1] >= data_temp[{y,x}]) ? ((data_temp[{y,x}+12'd1] - data_temp[{y,x}])<<4):8'd0;
                           s[5] = (data_temp[{y,x}+12'd63] >= data_temp[{y,x}]) ? ((data_temp[{y,x}+12'd63] - data_temp[{y,x}])<<5):8'd0;
                           s[6] = (data_temp[{y,x}+12'd64] >= data_temp[{y,x}]) ? ((data_temp[{y,x}+12'd64] - data_temp[{y,x}])<<6):8'd0;
                           s[7] = (data_temp[{y,x}+12'd65] >= data_temp[{y,x}]) ? ((data_temp[{y,x}+12'd65] - data_temp[{y,x}])<<7):8'd0;
                           lbp_temp[{y,x}] = s[0] + s[1] + s[2] + s[3] +s[4] + s[5] +s[6] + s[7];
                         end
                         else begin
                           s[0] = 8'd0;
                           s[1] = 8'd0;
                           s[2] = 8'd0;
                           s[3] = 8'd0;
                           s[4] = 8'd0;
                           s[5] = 8'd0;
                           s[6] = 8'd0;
                           s[7] = 8'd0;
                           lbp_temp[{y,x}] = s[0] + s[1] + s[2] + s[3] +s[4] + s[5] +s[6] + s[7];
                         end
           
                         
                       end
           
               
           endmodule
